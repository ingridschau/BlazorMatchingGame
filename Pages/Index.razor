@page "/"
@using System;
@using System.Timers

<style>
	.container {
		width: 400px;
	}
	
	button {
		width: 100px;
		height: 100px;
		font-size: 50px;
	}
</style>

<div class = 'container'>
	<div class = "row">
		@for (var iconNumber = 0; iconNumber < shuffledList.Count; iconNumber++)
		{
			var icon = shuffledList[iconNumber];
			var uniqueDescription = $"Button #{iconNumber}";
			<div class = "col-3">
				<button @onclick="@(() => ButtonClick(icon, uniqueDescription))"
						type = "button" class = "btn btn-outline-dark">
					<h1>@icon</h1>
				</button>
			</div>
		}
	</div>
	<div class = "row">
		<h2>Matches found: @matchesFound</h2>
		
	</div>
	<div class = "row">
		<h2>Time: @timeElapsed</h2>
	</div>
</div>

@code {
	List<string> animalEmoji = new List<string>()
	{
		"🐩","🐩",
		"🦢","🦢",
		"🐖","🐖",
		"🐳","🐳",
		"🦚","🦚",
		"🦖","🦖",
		"🐧","🐧",
		"🐢","🐢",
	};

	List<string> foodEmoji = new List<string>()
	{
		"🍕","🍕",
		"🥙","🥙",
		"🍤","🍤",
		"🍳","🍳",
		"🥨","🥨",
		"🧀","🧀",
		"🧂","🧂",
		"🍫","🍫",
	};

	List<string> emoji = new List<string>()
	{
		"🤗","🤗",
		"😁","😁",
		"😎","😎",
		"😪","😪",
		"🙄","🙄",
		"😇","😇",
		"🤠","🤠",
		"🤐","🤐",
	};


	List<string> shuffledList = new List<string>();
	List<string> chosenList = new List<string>();
	int matchesFound = 0;
	Timer timer;
	int tenthsOfSecondsElapsed = 0;
	string timeElapsed;

	private void PickAList()
	{
		Random random = new Random();
		int randomNumber;
		randomNumber = random.Next(0, 3);
		if (randomNumber == 0)
		{
			chosenList = animalEmoji;
		}
		else if (randomNumber == 1)
		{
			chosenList = foodEmoji;
		}
		else if (randomNumber == 2)
		{
			chosenList = emoji;
		}

	}

	private void ShuffleList()
	{
		// Call the method to pick a random list
		PickAList();
		//Shuffle the chosen list for each time the game runs
		Random random = new Random();
		shuffledList = chosenList
		.OrderBy(item => random.Next())
		.ToList();		
	}

	// What to run when the WebApp is initialized
	protected override void OnInitialized()
	{
		timer = new Timer(100);
		timer.Elapsed += Timer_Tick;

		SetUpGame();
	}

	// Set up the game
	private void SetUpGame()
	{
		ShuffleList();
		matchesFound = 0;
		tenthsOfSecondsElapsed = 0;

	}

	string lastIconFound = string.Empty;
	string lastDescription = string.Empty;

	private void ButtonClick(string icon, string iconDescription)
	{
		if (lastIconFound == string.Empty)
		{
			lastIconFound = icon;
			lastDescription = iconDescription;
			
			timer.Start();
		}
		else if ((lastIconFound == icon) && (iconDescription != lastDescription))
		{
			// Match found! Reset for next pair
			lastIconFound = string.Empty;

			// Replace found animals with empty string to hide them
			shuffledList = shuffledList
			.Select(a => a.Replace(icon, string.Empty))
			.ToList();

			matchesFound++;
			if (matchesFound == 8)
			{
				timer.Stop();
				SetUpGame();
			}
		}
		else
		{
			// User selected a pair that does not match
			// Reset selection
			lastIconFound = string.Empty;
		}
	}
	
	private void timer_Elapsed(object sender, ElapsedEventArgs e)
	{
		throw new NotImplementedException();
	}

	private void Timer_Tick(Object source, ElapsedEventArgs e)
	{
		InvokeAsync(() =>
		{
			tenthsOfSecondsElapsed++;
			timeElapsed = (tenthsOfSecondsElapsed / 10F)
				.ToString("0.0s");
			StateHasChanged();
		});
	}
}