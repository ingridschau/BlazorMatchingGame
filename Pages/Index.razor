@page "/"
@using System;
@using System.Timers

<style>
	.container {
		width: 400px;
	}
	
	button {
		width: 100px;
		height: 100px;
		font-size: 50px;
	}
	
	#startButton {
		width: 400px;
		height: 80px;
		font-size: 50px;
	}


	
	
</style>

	<div class = "container">

		<button @onclick="@(() => ButtonClick(isDisabled, startButtonText))"
					type = "button" class = "btn btn-outline-dark" id = "startButton">
				<h1>@startButtonText</h1>
		</button>			
	</div>

<div class = 'container'>
	
	
	<div class = "row">
		
		@if (!gameOver && !gameWon)
		{
			@for (var iconNumber = 0; iconNumber < shuffledList.Count; iconNumber++)
			{
				var icon = shuffledList[iconNumber];
				var uniqueDescription = $"Button #{iconNumber}";
				<div class = "col-3">
					<button @onclick="@(() => IconClick(icon, uniqueDescription))"
							type = "btn" class = "btn btn-outline-dark" disabled = "@isDisabled">
						<h1>@icon</h1>
					</button>
				</div>
			}
		}@if (gameOver && !gameWon)
		{
			@for (var stringNumber = 0; stringNumber < gameOverText.Count; stringNumber++)
			{
					@if (stringNumber > 3 && stringNumber < 12)
					{
						var icon = gameOverText[stringNumber];
						var uniqueDescription = $"Button #{stringNumber}";
						<div class = "col-3">
							<button type="button" class="btn btn-inverse btn-outline-danger"><h1>@icon</h1></button>
						</div>
					}
					else
					{
						var icon = gameOverText[stringNumber];
						var uniqueDescription = $"Button #{stringNumber}";
						<div class = "col-3">
							<button type = "button" class = "btn btn-outline-dark">
								<h1>@icon</h1>
							</button>
						</div>
					}
			}
		}@if (!gameOver && gameWon)
		{	
			@for (var stringNumber = 0; stringNumber < gameCompleteText.Count; stringNumber++)
			{
				@if (stringNumber > 3 && stringNumber < 12)
				{
					var icon = gameCompleteText[stringNumber];
					var uniqueDescription = $"Button #{stringNumber}";
					<div class = "col-3">
						<button type="button" class="btn btn-inverse btn-outline-success"><h1>@icon</h1></button>
					</div>
				}
				else
				{
					var icon = gameCompleteText[stringNumber];
					var uniqueDescription = $"Button #{stringNumber}";
					<div class = "col-3">
						<button type = "button" class = "btn btn-outline-dark">
							<h1>@icon</h1>
						</button>
					</div>
				}
			}
		}


	</div>

	<div class = "row">
		<h2>Matches found: @matchesFound</h2>
		
	</div>
	<div class = "row">
		<h2>Time left: @timeLeft</h2>
	</div>
</div>

@code {
	List<string> animalEmoji = new List<string>()
	{
		"🐩","🐩",
		"🦢","🦢",
		"🐖","🐖",
		"🐳","🐳",
		"🦚","🦚",
		"🦖","🦖",
		"🐧","🐧",
		"🐢","🐢",
	};

	List<string> foodEmoji = new List<string>()
	{
		"🍕","🍕",
		"🥙","🥙",
		"🍤","🍤",
		"🍳","🍳",
		"🥨","🥨",
		"🧀","🧀",
		"🍰","🍰",
		"🍫","🍫",
	};

	List<string> emoji = new List<string>()
	{
		"🤗","🤗",
		"😁","😁",
		"😎","😎",
		"😪","😪",
		"🙄","🙄",
		"😇","😇",
		"🤠","🤠",
		"🤐","🤐",
	};

	List<string> gameOverText = new List<string>()
	{
		" ", " ", " ", " ",
		"G", "A", "M", "E",
		"O", "V", "E", "R",
		" ", " ", " ", " "
	};	

	List<string> gameCompleteText = new List<string>()
	{
		"N", "I", "C", "E!",
		"G", "A", "M", "E",
		"C", "O	", "M", "P",
		"L", "E", "T", "E"
	};	

	List<string> shuffledList = new List<string>();
	List<string> chosenList = new List<string>();
	int matchesFound = 0;
	Timer timer;
	int tenthsOfSecondsElapsed = 0;
	string timeElapsed;
	Timer countdown;
	int countdownTenthsOfSeconds = 15;
	string timeLeft = "15:0s";
	string startButtonText = "Start game";
	bool isDisabled { get; set; } = true;
	bool gameOver { get; set; } = false;
	bool gameWon { get; set; } = false;
	int timesPlayed = 0;





	private void PickAList()
	{
		Random random = new Random();
		int randomNumber;
		randomNumber = random.Next(0, 3);
		if (randomNumber == 0)
		{
			chosenList = animalEmoji;
		}
		else if (randomNumber == 1)
		{
			chosenList = foodEmoji;
		}
		else if (randomNumber == 2)
		{
			chosenList = emoji;
		}

	}

	private void ShuffleList()
	{
		// Call the method to pick a random list
		PickAList();
		//Shuffle the chosen list for each time the game runs
		Random random = new Random();
		shuffledList = chosenList
		.OrderBy(item => random.Next())
		.ToList();		
	}

	// What to run when the WebApp is initialized
	protected override void OnInitialized()
	{
		timer = new Timer(150);
		timer.Elapsed += Timer_Tick;

		countdown = new Timer(150);
		countdown.Elapsed += Countdown_Tick;
		SetUpGame();

	}

	// Set up the game
	private void SetUpGame()
	{
		ShuffleList();
		matchesFound = 0;
		tenthsOfSecondsElapsed = 0;
		countdownTenthsOfSeconds = 150;
		gameOver = false;
		gameWon = false;

	}

	string lastIconFound = string.Empty;
	string lastDescription = string.Empty;

	private void IconClick(string icon, string iconDescription)
	{
		if (lastIconFound == string.Empty)
		{
			lastIconFound = icon;
			lastDescription = iconDescription;


		}
		else if ((lastIconFound == icon) && (iconDescription != lastDescription))
		{
			// Match found! Reset for next pair
			lastIconFound = string.Empty;

			// Replace found animals with empty string to hide them
			shuffledList = shuffledList
			.Select(a => a.Replace(icon, string.Empty))
			.ToList();

			matchesFound++;

			if (matchesFound == 8)
			{
				GameComplete();
			}
		}
		else
		{
			// User selected a pair that does not match
			// Reset selection
			lastIconFound = string.Empty;
		}
	}

	private void ButtonClick(Boolean startButton, string startGame)
	{
		isDisabled = false;
		timer.Start();
		countdown.Start();
		if (timesPlayed > 0)
		{
			SetUpGame();
		}
	}


	private void timer_Elapsed(object sender, ElapsedEventArgs e)
	{
		throw new NotImplementedException();
	}

	private void Timer_Tick(Object source, ElapsedEventArgs e)
	{
		InvokeAsync(() =>
		{
			tenthsOfSecondsElapsed++;
			timeElapsed = (tenthsOfSecondsElapsed / 10F)
				.ToString("0.0s");
			StateHasChanged();
		});
	}

	private void Countdown_Tick(Object source, ElapsedEventArgs e)
	{
		InvokeAsync(() =>
		{
			countdownTenthsOfSeconds--;
			timeLeft = (countdownTenthsOfSeconds / 10F)
				.ToString("0.0s");
			StateHasChanged();
		});
		if (countdownTenthsOfSeconds == 0.0)
			GameOver();


	}

	private void GameOver()
	{
		timer.Stop();
		countdown.Stop();
		gameOver = true;
		isDisabled = true;
		startButtonText = "Restart game";
		timesPlayed++;

	}

	private void GameComplete()
	{
		timer.Stop();
		countdown.Stop();
		gameWon = true;
		isDisabled = true;
		startButtonText = "Restart game";
		timesPlayed++;
	}
}